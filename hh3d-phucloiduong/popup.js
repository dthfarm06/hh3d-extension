// popup.js - Ch·ªâ gi·ªØ l·∫°i ch·ª©c nƒÉng PH√öC L·ª¢I ƒê∆Ø·ªúNG

// H√†m updateResult global ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü m·ªçi n∆°i
function updateResult(message, type = 'info') {
    const resultElement = document.getElementById('resultText');
    if (resultElement) {
        resultElement.innerHTML = message;
        
        // ƒê·ªïi m√†u d·ª±a tr√™n lo·∫°i th√¥ng b√°o
        if (type === 'error') {
            resultElement.className = 'error';
        } else if (type === 'success') {
            resultElement.className = 'success';
        } else {
            resultElement.className = 'info';
        }
    }
}

// H√†m qu·∫£n l√Ω state persistent cho Ph√∫c L·ª£i ƒê∆∞·ªùng
async function getPhucLoiDuongState() {
    const result = await chrome.storage.local.get(['phucLoiDuongState']);
    return result.phucLoiDuongState || {
        isRunning: false,
        currentCycle: 0,
        maxCycles: 4,
        endTime: null,
        lastUpdateTime: null
    };
}

async function savePhucLoiDuongState(state) {
    state.lastUpdateTime = Date.now();
    await chrome.storage.local.set({ phucLoiDuongState: state });
}

async function clearPhucLoiDuongState() {
    await chrome.storage.local.remove(['phucLoiDuongState']);
    // D·ª´ng icon timer khi clear state
    sendMessageToBackground('STOP_ICON_TIMER');
}

// ==================== ICON FUNCTIONS ====================

// H√†m g·ª≠i message ƒë·∫øn background ƒë·ªÉ c·∫≠p nh·∫≠t icon
function sendMessageToBackground(type, data = {}) {
    chrome.runtime.sendMessage({ type, ...data }, (response) => {
        if (chrome.runtime.lastError) {
            console.log('‚ùå Error sending message to background:', chrome.runtime.lastError.message);
        } else {
            console.log('‚úÖ Message sent to background:', type, response);
        }
    });
}

// H√†m c·∫≠p nh·∫≠t icon d·ª±a tr√™n state
async function updateIconBasedOnState(state) {
    if (!state || !state.isRunning) {
        // Kh√¥ng ch·∫°y - reset v·ªÅ icon m·∫∑c ƒë·ªãnh
        sendMessageToBackground('STOP_ICON_TIMER');
        return;
    }
    
    if (state.endTime) {
        const now = Date.now();
        const timeLeft = Math.max(0, Math.floor((state.endTime - now) / 1000));
        const minutesLeft = Math.floor(timeLeft / 60);
        
        if (timeLeft > 0) {
            // C√≤n th·ªùi gian - hi·ªÉn th·ªã ph√∫t c√≤n l·∫°i
            sendMessageToBackground('UPDATE_ICON', {
                minutes: minutesLeft,
                cyclesLeft: null,
                isCompleted: false
            });
        } else {
            // H·∫øt th·ªùi gian chu tr√¨nh hi·ªán t·∫°i
            const cyclesRemaining = state.maxCycles - state.currentCycle;
            if (cyclesRemaining > 0) {
                // C√≤n chu tr√¨nh - hi·ªÉn th·ªã s·ªë l∆∞·ª£t c√≤n l·∫°i (icon xanh)
                sendMessageToBackground('UPDATE_ICON', {
                    minutes: null,
                    cyclesLeft: cyclesRemaining,
                    isCompleted: false
                });
            } else {
                // H·∫øt t·∫•t c·∫£ chu tr√¨nh (icon xanh v·ªõi s·ªë 0)
                sendMessageToBackground('UPDATE_ICON', {
                    minutes: null,
                    cyclesLeft: null,
                    isCompleted: true
                });
            }
        }
    }
}

// ==================== PH√öC L·ª¢I ƒê∆Ø·ªúNG FUNCTIONS ====================

// H√†m ch√≠nh Ph√∫c L·ª£i ƒê∆∞·ªùng
async function phucLoiDuong() {
    const state = await getPhucLoiDuongState();
    
    if (state.isRunning) {
        // D·ª´ng chu tr√¨nh n·∫øu ƒëang ch·∫°y
        if (window.phucLoiDuongInterval) {
            clearInterval(window.phucLoiDuongInterval);
            window.phucLoiDuongInterval = null;
        }
        await clearPhucLoiDuongState();
        updateResult('‚èπÔ∏è ƒê√£ d·ª´ng chu tr√¨nh Ph√∫c L·ª£i ƒê∆∞·ªùng', 'info');
        await updatePhucLoiDuongButtonUI();
        return;
    }
    
    // B·∫Øt ƒë·∫ßu chu tr√¨nh m·ªõi
    const newState = {
        isRunning: true,
        currentCycle: 1,
        maxCycles: 4,
        endTime: Date.now() + (30 * 60 * 1000), // 30 ph√∫t
        lastUpdateTime: Date.now()
    };
    
    await savePhucLoiDuongState(newState);
    updateResult('üéÅ B·∫Øt ƒë·∫ßu chu tr√¨nh Ph√∫c L·ª£i ƒê∆∞·ªùng (1/4)', 'info');
    
    // B·∫Øt ƒë·∫ßu icon timer
    sendMessageToBackground('START_ICON_TIMER');
    
    // M·ªü trang v√† click r∆∞∆°ng
    performPhucLoiDuongClick();
    
    // B·∫Øt ƒë·∫ßu timer v√† c·∫≠p nh·∫≠t UI
    startPhucLoiDuongTimer();
    await updatePhucLoiDuongButtonUI();
}

// H√†m th·ª±c hi·ªán click r∆∞∆°ng v√† m·ªü trang ph√∫c l·ª£i ƒë∆∞·ªùng
async function performPhucLoiDuongClick() {
    try {
        const url = CONFIG.getPhucLoiDuongUrl();
        console.log('üéÅ M·ªü trang Ph√∫c L·ª£i ƒê∆∞·ªùng:', url);
        
        // M·ªü trang ph√∫c l·ª£i ƒë∆∞·ªùng trong tab hi·ªán t·∫°i
        chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
            chrome.tabs.update(tabs[0].id, {url: url}, function() {
                console.log('‚úÖ ƒê√£ m·ªü trang Ph√∫c L·ª£i ƒê∆∞·ªùng, ch·ªù auto-click r∆∞∆°ng');
            });
        });
        
    } catch (error) {
        console.error('‚ùå L·ªói m·ªü trang Ph√∫c L·ª£i ƒê∆∞·ªùng:', error);
        updateResult('‚ùå L·ªói m·ªü trang Ph√∫c L·ª£i ƒê∆∞·ªùng: ' + error.message, 'error');
    }
}

// H√†m c·∫≠p nh·∫≠t UI button Ph√∫c L·ª£i ƒê∆∞·ªùng
async function updatePhucLoiDuongButtonUI() {
    const button = document.getElementById('phucLoiDuongButton');
    if (!button) return;
    
    const state = await getPhucLoiDuongState();
    
    if (!state.isRunning) {
        // Tr·∫°ng th√°i b√¨nh th∆∞·ªùng
        button.innerHTML = 'PH√öC L·ª¢I ƒê∆Ø·ªúNG';
        button.style.background = 'linear-gradient(to right, #9C27B0, #673AB7)';
        return;
    }
    
    if (state.endTime) {
        // ƒêang trong th·ªùi gian ƒë·∫øm ng∆∞·ª£c
        const now = Date.now();
        const timeLeft = Math.max(0, Math.floor((state.endTime - now) / 1000));
        
        if (timeLeft > 0) {
            const totalMinutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            
            let timeDisplay;
            if (totalMinutes > 0) {
                if (seconds > 0) {
                    timeDisplay = `${totalMinutes}p ${seconds}s`;
                } else {
                    timeDisplay = `${totalMinutes} ph√∫t`;
                }
            } else {
                timeDisplay = `${seconds} gi√¢y`;
            }
            
            button.innerHTML = `PH√öC L·ª¢I ƒê∆Ø·ªúNG ${state.currentCycle}/4<br><span class="countdown">${timeDisplay}</span><br><small style="font-size: 12px; opacity: 0.8;">(Click ƒë·ªÉ d·ª´ng)</small>`;
            button.style.background = 'linear-gradient(to right, #9C27B0, #673AB7)';
            
            // C·∫≠p nh·∫≠t icon v·ªõi s·ªë ph√∫t c√≤n l·∫°i
            updateIconBasedOnState();
        } else {
            // H·∫øt th·ªùi gian, chuy·ªÉn sang chu tr√¨nh ti·∫øp theo
            state.currentCycle++;
            if (state.currentCycle >= state.maxCycles) {
                // Ho√†n th√†nh t·∫•t c·∫£ chu tr√¨nh
                if (window.phucLoiDuongInterval) {
                    clearInterval(window.phucLoiDuongInterval);
                    window.phucLoiDuongInterval = null;
                }
                await clearPhucLoiDuongState();
                button.innerHTML = 'PH√öC L·ª¢I ƒê∆Ø·ªúNG';
                button.style.background = 'linear-gradient(to right, #4CAF50, #2E8B57)';
                updateResult('üéâ Ho√†n th√†nh t·∫•t c·∫£ 4 chu tr√¨nh Ph√∫c L·ª£i ƒê∆∞·ªùng!', 'success');
                
                // C·∫≠p nh·∫≠t icon th√†nh ho√†n th√†nh
                updateIconBasedOnState();
                
                // Reset v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu sau 5 gi√¢y
                setTimeout(async () => {
                    button.style.background = 'linear-gradient(to right, #9C27B0, #673AB7)';
                    await updatePhucLoiDuongButtonUI();
                    updateIconBasedOnState(); // Reset icon v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng
                }, 5000);
            } else {
                // B·∫Øt ƒë·∫ßu chu tr√¨nh ti·∫øp theo
                state.endTime = Date.now() + (30 * 60 * 1000); // 30 ph√∫t cho chu tr√¨nh ti·∫øp theo
                await savePhucLoiDuongState(state);
                
                // C·∫≠p nh·∫≠t icon cho chu tr√¨nh m·ªõi
                updateIconBasedOnState();
                
                updateResult(`üîÑ B·∫Øt ƒë·∫ßu chu tr√¨nh ${state.currentCycle}/4`, 'info');
                performPhucLoiDuongClick();
                startPhucLoiDuongTimer();
            }
        }
    } else {
        // ƒêang ch·∫°y chu tr√¨nh (ch∆∞a c√≥ endTime)
        button.innerHTML = `ƒêANG CH·∫†Y ${state.currentCycle}/4<br><small style="font-size: 12px; opacity: 0.8;">(Click ƒë·ªÉ d·ª´ng)</small>`;
        button.style.background = 'linear-gradient(to right, #f44336, #d32f2f)';
    }
}

// H√†m b·∫Øt ƒë·∫ßu timer cho ph√∫c l·ª£i ƒë∆∞·ªùng
function startPhucLoiDuongTimer() {
    // Clear existing timer n·∫øu c√≥
    if (window.phucLoiDuongInterval) {
        clearInterval(window.phucLoiDuongInterval);
    }
    
    window.phucLoiDuongInterval = setInterval(async () => {
        await updatePhucLoiDuongButtonUI();
        
        const state = await getPhucLoiDuongState();
        if (!state.isRunning || !state.endTime) {
            clearInterval(window.phucLoiDuongInterval);
            window.phucLoiDuongInterval = null;
        }
    }, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y
}

// H√†m kh√¥i ph·ª•c tr·∫°ng th√°i Ph√∫c L·ª£i ƒê∆∞·ªùng khi popup ƒë∆∞·ª£c m·ªü l·∫°i
async function restorePhucLoiDuongState() {
    try {
        const state = await getPhucLoiDuongState();
        if (state.isRunning && state.endTime) {
            const now = Date.now();
            const remainingTime = state.endTime - now;
            
            if (remainingTime > 0) {
                // V·∫´n c√≤n th·ªùi gian, kh√¥i ph·ª•c countdown
                console.log(`üîÑ Kh√¥i ph·ª•c Ph√∫c L·ª£i ƒê∆∞·ªùng: Cycle ${state.currentCycle}/4, c√≤n ${Math.ceil(remainingTime / 60000)} ph√∫t`);
                await updatePhucLoiDuongButtonUI();
                
                // B·∫Øt ƒë·∫ßu interval ƒë·ªÉ c·∫≠p nh·∫≠t UI
                startPhucLoiDuongTimer();
                updateIconBasedOnState(); // C·∫≠p nh·∫≠t icon khi kh√¥i ph·ª•c state
            } else {
                // H·∫øt th·ªùi gian, chuy·ªÉn sang cycle ti·∫øp theo ho·∫∑c ho√†n th√†nh
                if (state.currentCycle >= state.maxCycles) {
                    if (window.phucLoiDuongInterval) {
                        clearInterval(window.phucLoiDuongInterval);
                        window.phucLoiDuongInterval = null;
                    }
                    await clearPhucLoiDuongState();
                    updateResult('üéâ Ho√†n th√†nh t·∫•t c·∫£ 4 chu tr√¨nh Ph√∫c L·ª£i ƒê∆∞·ªùng!', 'success');
                    updateIconBasedOnState(); // C·∫≠p nh·∫≠t icon khi ho√†n th√†nh
                } else {
                    state.currentCycle++;
                    state.endTime = Date.now() + (30 * 60 * 1000);
                    await savePhucLoiDuongState(state);
                    updateResult(`üîÑ B·∫Øt ƒë·∫ßu chu tr√¨nh ${state.currentCycle}/4`, 'info');
                    performPhucLoiDuongClick();
                    startPhucLoiDuongTimer();
                    updateIconBasedOnState(); // C·∫≠p nh·∫≠t icon cho chu tr√¨nh m·ªõi
                }
                await updatePhucLoiDuongButtonUI();
                updateIconBasedOnState(); // C·∫≠p nh·∫≠t icon sau khi thay ƒë·ªïi state
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói kh√¥i ph·ª•c tr·∫°ng th√°i Ph√∫c L·ª£i ƒê∆∞·ªùng:', error);
    }
}

// ==================== END PH√öC L·ª¢I ƒê∆Ø·ªúNG FUNCTIONS ====================

// H√†m setup mode toggle
function setupModeToggle() {
    const toggle = document.getElementById('testModeToggle');
    const currentModeDiv = document.getElementById('currentMode');
    
    // Set initial state
    toggle.checked = CONFIG.TEST_MODE;
    updateModeDisplay();
    
    // Handle toggle change
    toggle.addEventListener('change', function() {
        CONFIG.TEST_MODE = this.checked;
        updateModeDisplay();
        
        // Update message
        const mode = CONFIG.TEST_MODE ? 'Test Mode' : 'Production Mode';
        updateResult(`üîÑ Switched to ${mode}`, 'info');
        
        console.log(`üîß Mode changed to: ${mode}`);
    });
    
    function updateModeDisplay() {
        const mode = CONFIG.TEST_MODE ? 'TEST' : 'PROD';
        const phucLoiDuongUrl = CONFIG.getPhucLoiDuongUrl();
        
        currentModeDiv.innerHTML = `
            üìç Mode: <strong>${mode}</strong><br>
            üéÅ Ph√∫c l·ª£i ƒë∆∞·ªùng: ${phucLoiDuongUrl.includes('file://') ? 'Local File' : 'Online'}
        `;
    }
}

// Event listeners khi DOM loaded
document.addEventListener('DOMContentLoaded', function() {
    // Ch·ªâ gi·ªØ l·∫°i event listener cho Ph√∫c L·ª£i ƒê∆∞·ªùng
    document.getElementById('phucLoiDuongButton').addEventListener('click', phucLoiDuong);
    
    // Kh√¥i ph·ª•c tr·∫°ng th√°i khi popup ƒë∆∞·ª£c m·ªü
    restorePhucLoiDuongState();
    
    // C·∫≠p nh·∫≠t icon ngay khi popup m·ªü
    updateIconBasedOnState();
    
    // Setup mode toggle
    setupModeToggle();
});
